package com.chomp.wifistorymachine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;


import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AUDIOBOOKS_LIST".
*/
public class AudiobooksListDao extends AbstractDao<AudiobooksList, Void> {

    public static final String TABLENAME = "AUDIOBOOKS_LIST";

    /**
     * Properties of entity AudiobooksList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Fid = new Property(0, long.class, "fid", true, "FID");
        public final static Property Artist = new Property(1, String.class, "artist", false, "ARTIST");
        public final static Property Spell = new Property(2, String.class, "spell", false, "SPELL");
        public final static Property Ds = new Property(3, Integer.class, "ds", false, "DS");
        public final static Property N = new Property(4, String.class, "n", false, "N");
        public final static Property Letter = new Property(5, String.class, "letter", false, "LETTER");
        public final static Property Album = new Property(6, String.class, "album", false, "ALBUM");
        public final static Property Subfolder = new Property(7, String.class, "subfolder", false, "SUBFOLDER");
    };


    public AudiobooksListDao(DaoConfig config) {
        super(config);
    }
    
    public AudiobooksListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIOBOOKS_LIST\" (" + //
                "\"FID\" INTEGER NOT NULL ," + // 0: fid
                "\"ARTIST\" TEXT," + // 1: artist
                "\"SPELL\" TEXT," + // 2: spell
                "\"DS\" INTEGER," + // 3: ds
                "\"N\" TEXT," + // 4: n
                "\"LETTER\" TEXT," + // 5: letter
                "\"url\" TEXT," + // 6: url
                "\"SUBFOLDER\" TEXT);"); // 7: subfolder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIOBOOKS_LIST\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AudiobooksList entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getFid());
 
        String artist = entity.getArtist();
        if (artist != null) {
            stmt.bindString(2, artist);
        }
 
        String spell = entity.getSpell();
        if (spell != null) {
            stmt.bindString(3, spell);
        }
 
        Integer ds = entity.getDs();
        if (ds != null) {
            stmt.bindLong(4, ds);
        }
 
        String n = entity.getN();
        if (n != null) {
            stmt.bindString(5, n);
        }
 
        String letter = entity.getLetter();
        if (letter != null) {
            stmt.bindString(6, letter);
        }
 
        String album = entity.getAlbum();
        if (album != null) {
            stmt.bindString(7, album);
        }
 
        String subfolder = entity.getSubfolder();
        if (subfolder != null) {
            stmt.bindString(8, subfolder);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AudiobooksList readEntity(Cursor cursor, int offset) {
        AudiobooksList entity = new AudiobooksList( //
            cursor.getLong(offset + 0), // fid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // artist
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // spell
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // ds
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // n
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // letter
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // album
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // subfolder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AudiobooksList entity, int offset) {
        entity.setFid(cursor.getLong(offset + 0));
        entity.setArtist(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSpell(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDs(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setN(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLetter(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAlbum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubfolder(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AudiobooksList entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AudiobooksList entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
