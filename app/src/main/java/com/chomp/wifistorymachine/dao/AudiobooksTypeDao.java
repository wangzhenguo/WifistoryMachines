package com.chomp.wifistorymachine.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "AUDIOBOOKS_TYPE".
*/
public class AudiobooksTypeDao extends AbstractDao<AudiobooksType, Void> {

    public static final String TABLENAME = "AUDIOBOOKS_TYPE";

    /**
     * Properties of entity AudiobooksType.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property V = new Property(0, int.class, "v", false, "V");
        public final static Property N = new Property(1, String.class, "n", false, "N");

    };


    public AudiobooksTypeDao(DaoConfig config) {
        super(config);
    }
    
    public AudiobooksTypeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AUDIOBOOKS_TYPE\" (" + //
                "\"V\" INTEGER NOT NULL ," + // 0: v
                "\"N\" TEXT NOT NULL );"); // 2: n
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AUDIOBOOKS_TYPE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AudiobooksType entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getSortid());
        stmt.bindString(2, entity.getSortname());

    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public AudiobooksType readEntity(Cursor cursor, int offset) {
        AudiobooksType entity = new AudiobooksType( //
            cursor.getInt(offset + 0), // v
            cursor.getString(offset + 1) // n

        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AudiobooksType entity, int offset) {
        entity.setSortid(cursor.getInt(offset + 0));
        entity.setSortname(cursor.getString(offset + 1));

     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(AudiobooksType entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(AudiobooksType entity) {
        return null;
    }

    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
